<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Iacono Central]]></title>
  <link href="http://iacono.heroku.com/atom.xml" rel="self"/>
  <link href="http://iacono.heroku.com/"/>
  <updated>2011-11-16T12:22:55-06:00</updated>
  <id>http://iacono.heroku.com/</id>
  <author>
    <name><![CDATA[Jeff Iacono]]></name>
    <email><![CDATA[jeff.iacono@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My gift to my girlfriend]]></title>
    <link href="http://iacono.heroku.com/writings/2011/11/16/my-gift-to-my-girlfriend/"/>
    <updated>2011-11-16T12:22:00-06:00</updated>
    <id>http://iacono.heroku.com/writings/2011/11/16/my-gift-to-my-girlfriend</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Penalty Blox Chrome Extension]]></title>
    <link href="http://iacono.heroku.com/writings/2011/11/14/penalty-blox-chrome-extension/"/>
    <updated>2011-11-14T18:23:00-06:00</updated>
    <id>http://iacono.heroku.com/writings/2011/11/14/penalty-blox-chrome-extension</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://iacono.heroku.com/images/posts/penalty-blox.png" title="'PenaltyBlox'" >
Whether it is a designer ultra-tweeting about some conference she is at or a venture capitalist intensely describing his pursuit of the always-elusive &#8220;inbox zero&#8221;, sometimes you just want to mute someone you follow on Twitter.</p>

<p>This extensions allows you to do just that.
You can easily put accounts that you follow in the <em>penalty box</em>, where they will be silenced and feel shame.
When you have deemed their sins absolved, you can let them out, free to fill your Twitter stream again.</p>

<p>Penalty bloxed people are not notified in any way that they have been temporarily removed from your timeline.</p>

<ul>
<li><a href="https://github.com/jeffreyiacono/penalty-blox">View the source code</a></li>
<li><a href="https://chrome.google.com/webstore/detail/ajoigckelmnkcjajbeinpkmbndeiokdg">Download it here</a> (<em>note:</em> Chrome browser only)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Do you test?]]></title>
    <link href="http://iacono.heroku.com/writings/2011/08/24/do-you-test/"/>
    <updated>2011-08-24T15:23:00-05:00</updated>
    <id>http://iacono.heroku.com/writings/2011/08/24/do-you-test</id>
    <content type="html"><![CDATA[<p>Note: this was in response to a question asked on the <a href="http://dallasrb.org/" title="Dallas.rb homepage">Dallas.rb</a> group regarding if, how, and why you write tests (or specs, or whatever you want to call them).</p>

<p>Definitely test.
It will feel weird / slow at first, but it helps you write much cleaner, more modular code.
I initially hated it when I was forcing myself to adopt it, now I feel naked without it.
For me, I find testing important for a few reasons:</p>

<ul>
<li><p>It helps me think through what I want the app to do should do from a stakeholders standpoint.</p></li>
<li><p>It helps me and anyone else working on my app from a dev standpoint know how my app and its components should behave - specifications should do just that:
specify what certain things should do! I try to always ask myself &#8220;What should you do, Mr. Object&#8221; and then write a spec around that.</p>

<p>For example, take a look at this:</p>

<p><div><script src='https://gist.github.com/1168937.js?file='></script>
<noscript><pre><code>describe User do
it { should validate_presence_of :email }</p>

<p>describe :full_name do
  subject { User.new(:email =&gt; &quot;jeff@iacono.com&quot;) }</p>

<p>  context &quot;when first and last name are present&quot; do</p>

<pre><code>before { subject.first_name, subject.last_name = &amp;quot;Jeff&amp;quot;, &amp;quot;Iacono&amp;quot; } 
its(:full_name) { should eq(&amp;quot;Jeff Iacono&amp;quot;) }
</code></pre>

<p>  end</p>

<p>  context &quot;when only first name is present&quot; do</p>

<pre><code>before { subject.first_name = &amp;quot;Jeff&amp;quot; } 
its(:full_name) { should eq(&amp;quot;Jeff&amp;quot;) }
</code></pre>

<p>  end</p>

<p>  context &quot;when only last name is present&quot; do</p>

<pre><code>before { subject.last_name = &amp;quot;Iacono&amp;quot; } 
its(:full_name) { should eq(&amp;quot;Iacono&amp;quot;) }
</code></pre>

<p>  end</p>

<p>  context &quot;when first and last is present&quot; do</p>

<pre><code>its(:full_name) { should eq(&amp;quot;jeff@iacono.com&amp;quot;) }
</code></pre>

<p>  end
end
end</code></pre></noscript></div></p>

<p>You can see what I&#8217;d expect if you were to write <em>User#full_name</em>. It says: <em>&#8220;Show me the full name when available, or its parts, or default to the email address, which is ensured to be present, if all else fails.&#8221;</em>
Perhaps we drew up this specification when determining how we should handle displaying a &#8220;Hi, #{current_user.full_name}&#8221; in our UI for the different cases our app might encounter.
Or perhaps #full_name was the failing part of our acceptance test when we were writing the code that we wish he had.
(See <a href="http://pragprog.com/book/achbd/the-rspec-book">The RSpec Book</a> for this reference and a very informative read.)</p></li>
<li><p>It&#8217;s an insurance policy and time saver.
Anytime you change your app you can be confident that other areas still behave as expected.
My workflow before TDD / BDD was:</p>

<ol>
<li>implement some new feature</li>
<li>think through all other parts that could be effected</li>
<li>pop open my dev env and manually test each to make sure things were working.</li>
</ol>


<p>This was a waste of time and exposed me to my own human error: perhaps I forgot to do a certain thing or whatever.
The computer is your friend (and worker), make it do the checking for you.
My workflow is now:</p>

<ol>
<li>implement some new feature</li>
<li>initiate tests</li>
<li>go make a sandwich, return and see what passed what needs fixing.</li>
</ol>


<p>  I found writing expressive and clean unit tests much easier than acceptance tests.
  If you are using Cucumber, check this out: <a href="http://benmabey.com/2008/05/19/imperative-vs-declarative-scenarios-in-user-stories.html">Imperative vs Declarative scenarios in user stories</a> and try to avoid using the pre-packaged web-steps when possible.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DRYing up those controller specs]]></title>
    <link href="http://iacono.heroku.com/writings/2011/04/09/drying-up-those-controller-specs/"/>
    <updated>2011-04-09T13:39:00-05:00</updated>
    <id>http://iacono.heroku.com/writings/2011/04/09/drying-up-those-controller-specs</id>
    <content type="html"><![CDATA[<p>I recently had a bunch of duplicate code in my controller specs and wanted to share a solution I arrived at that DRYed things up significantly.
Feel free to use it and abuse it and if you have recommendations on how to improve it, let me know.</p>

<p>First, the quick requirements and background: <em>all</em> controller methods must explicitly demonstrate that guests do not have access to certain resources and are told, upon any attempt to access them, that they must login in order gain access.</p>

<p>The first pass was to write the tests, get all to pass, then look to consolidate and improve the suites.
Here&#8217;s the first pass:</p>

<div><script src='https://gist.github.com/1134284.js?file='></script>
<noscript><pre><code># Client required that *all* routes for controllers are covered and 
# do not allow guest access.
#
# There are several other controllers that, for guest test coverage,
# are identical to the Items Controller spec below
# Note: there are several non-CRUD methods; destroy makes a record
#       inactive; there is no record removal revealed via the API (client's request)

# spec/controllers/items_controller_spec.rb
require 'spec_helper'

describe ItemsController do
  context 'guest' do
    describe 'GET to index' do
      before  { get :index }
      specify { response.should redirect_to(login_path) }
      specify { flash.alert.should =~ /You must be logged in to access this page/ }
    end

    describe 'GET to show' do
      before  { get :show, :id =&gt; 1 }
      specify { response.should redirect_to(login_path) }
      specify { flash.alert.should =~ /You must be logged in to access this page/ }
    end

    describe 'GET to export' do
      before  { get :export }
      specify { response.should redirect_to(login_path) }
      specify { flash.alert.should =~ /You must be logged in to access this page/ }
    end

    describe 'GET to new' do
      before  { get :new }
      specify { response.should redirect_to(login_path) }
      specify { flash.alert.should =~ /You must be logged in to access this page/ }
    end

    describe 'POST to create' do
      before  { post :create }
      specify { response.should redirect_to(login_path) }
      specify { flash.alert.should =~ /You must be logged in to access this page/ }
    end

    describe 'GET to edit' do
      before  { get :edit, :id =&gt; 1 }
      specify { response.should redirect_to(login_path) }
      specify { flash.alert.should =~ /You must be logged in to access this page/ }
    end

    describe 'PUT to update' do
      before  { put :update, :id =&gt; 1 }
      specify { response.should redirect_to(login_path) }
      specify { flash.alert.should =~ /You must be logged in to access this page/ }
    end

    describe 'DELETE to destroy' do
      before  { delete :destroy, :id =&gt; 1 }
      specify { response.should redirect_to(login_path) }
      specify { flash.alert.should =~ /You must be logged in to access this page/ }
    end

    describe 'PUT to activate' do
      before  { put :activate, :id =&gt; 1 }
      specify { response.should redirect_to(login_path) }
      specify { flash.alert.should =~ /You must be logged in to access this page/ }
    end
  end
end

# spec/controllers/widgets_controller_spec.rb
require 'spec_helper'

describe WidgetsController do
  context 'guest' do
    # same code as ItemsControllerSpec above
  end
end

# spec/controllers/gears_controller_spec.rb
require 'spec_helper'

describe GearsController do
  context 'guest' do
    # same code as ItemsControllerSpec above
  end
end

# etc.</code></pre></noscript></div>


<p>These specs duplicate an awfully large amount of code.
This is an issue because more lines of code translate into more maintenance, more potential areas to make mistakes, and more places that need to be updated when things change.
(For example, what if we want to flash an alert of <em>&#8220;OH NOZ, SIGN IN FIRST PLZ&#8221;</em>?
I could find and replace, but that should be handled in one place.)</p>

<p>In order to remedy these issues, I added a controller macro that includes <em>#it_should_block_access_to(action, options = {})</em>, which is passed an action (:index, :create, :update), maps each to a default method (:get, :post, :put) if none is specified, and generates the appropriate routing (member vs collections).
It also handles format specification, such as :json, or setting any other arbitrary params via the options hash.</p>

<p>Here&#8217;s the refactored code:</p>

<div><script src='https://gist.github.com/1134094.js?file='></script>
<noscript><pre><code># Client required that *all* methods for controllers are covered and 
# do not allow guest access.
#
# To remove code duplication, add controller macro, update test suite.
# Macro defaults to :html formatted requests and handles member vs collection (assumes :id)
# Note that we can specify methods, formats, params, etc. along the lines of:
#   it_should_block_access_to :index, :format =&gt; :json
#   it_should_block_access_to :something, :method =&gt; :post
#   it_should_block_access_to :index, :foo =&gt; :bar

# spec/support/controller_macros.rb
module ControllerMacros
  def self.included(base)
    base.extend(ClassMethods)
  end

  module ClassMethods
    def default_method_for(action)
      case action
      when :index, :show, :new, :edit, :export; return :get
      when :create;                             return :post
      when :update, :activate;                  return :put
      when :destroy;                            return :delete
      else raise &quot;no default method for #{action}&quot;
      end
    end

    def it_should_block_access_to(action, options = {})
      options[:format] ||= :html
      options[:id] = 1 if [:show, :edit, :destroy, :activate, :update].include?(action)

      method = options.delete(:method) || default_method_for(action)

      describe &quot;#{method.to_s.upcase} to #{action} via #{options[:format]}&quot; do
        before  { send(method, action, options) }
        specify { response.should redirect_to(login_path) }
        specify { flash.alert.should =~ /You must be logged in to access this page/ }
      end
    end
  end
end

RSpec.configuration.include ControllerMacros, :type =&gt; :controller


# spec/controllers/items_controller_spec.rb
require 'spec_helper'

describe ItemsController do
  context 'guest' do
    it_should_block_access_to :index
    it_should_block_access_to :show
    it_should_block_access_to :export
    it_should_block_access_to :new
    it_should_block_access_to :create
    it_should_block_access_to :edit
    it_should_block_access_to :update
    it_should_block_access_to :destroy
    it_should_block_access_to :activate    
  end
end

# spec/controllers/widgets_controller_spec.rb
require 'spec_helper'

describe WidgetsController do
  context 'guest' do
    it_should_block_access_to :index
    it_should_block_access_to :show
    it_should_block_access_to :export
    it_should_block_access_to :new
    it_should_block_access_to :create
    it_should_block_access_to :edit
    it_should_block_access_to :update
    it_should_block_access_to :destroy
    it_should_block_access_to :activate
  end
end

# spec/controllers/gears_controller_spec.rb
require 'spec_helper'

describe GearsController do
  context 'guest' do
    it_should_block_access_to :index
    it_should_block_access_to :show
    it_should_block_access_to :export
    it_should_block_access_to :new
    it_should_block_access_to :create
    it_should_block_access_to :edit
    it_should_block_access_to :update
    it_should_block_access_to :destroy
    it_should_block_access_to :activate
  end
end

# etc.</code></pre></noscript></div>


<p>The controller specs are cleaner, a big chunk of code duplication has been removed, and there is a main handler for these tests that does not (in my opinion) add too much complexity into the testing suite.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kevin Costner is full of sh*t]]></title>
    <link href="http://iacono.heroku.com/writings/2010/03/01/kevin-costner-is-full-of-sh-t/"/>
    <updated>2010-03-01T17:37:00-06:00</updated>
    <id>http://iacono.heroku.com/writings/2010/03/01/kevin-costner-is-full-of-sh-t</id>
    <content type="html"><![CDATA[<p>Kevin Costner is full of sh*t &#8230; when it comes to startups at least.
<strong>Build it and they will come.</strong>
I implore you, do not listen to this man! This line of thinking is <em>out in left field</em>.</p>

<p>I have to admit, I used to subscribe to this tag line.
A few years back, I felt that if the idea was there, all that was barring a venture from success was time, effort, and determination.
As a result, several of my early projects were drastically over engineered and tragically under utilized.</p>

<p>Case in point, in a 2005 project I wrote an entire professional network platform.
It was Facebook meets LinkedIn (this was back when FB was still only for college kids and LinkedIn was lame).
I was going to make the professional network that young professionals wanted and needed to join.
I would monetize it somehow, but with the eyes and ears of tomorrow&#8217;s top earners, I felt this would &#8220;fall into place&#8221;.
I wrote over 50,000 loc.
It did everything: secure login, password reset, profile creation, group formation, group messaging, secret groups, public groups, photo upload, friend requests, etc.
I saw about 150 members over the next few months with few <em>sticky members</em>.
The issue wasn&#8217;t that I had built a bad product or service, but more that I hadn&#8217;t done my homework and gathered real world data before setting up shop.</p>

<p>What could I have done differently?
I should have given a big middle finger to Kevin Costner and incrementally tested my thesis:
<em>young professionals (especially those in major urban environments a la New York City, Boston, DC, and so on) need a better way to network in the work place.</em>
At the very least, before I wrote a single script, I should have sent out an email to my friends and asked if this perceived pain point was a reality.
If yes, did my proposed solution solve the problem? Make it worse?
After passing these first sanity checks and receiving some initial buy in, I could have then produced a vastly trimmed down initial service (minimally viable product) to test actual adoption and utilization and gone from there.
These would have been intelligent, no-brainer steps to have taken.
But as developers we often don&#8217;t do this.
We get into the groove and let the code fly.
Projects like this burn you out both emotionally and entrepreneurially.
You only have so much fuel for the furnace and hours in the day, so choose wisely.</p>

<p>This insight sprung up in my head over the past week when discussing a friend&#8217;s startup idea.
He had built a great product and wanted me to test it out.
I told him I&#8217;m not going to likely be one of his early adopters and to go to a popular blog dedicated to people he&#8217;d likely want to start off with.
There he should start recruiting people and see if they are interested.
If so, why? If not, why not?
Which of the first features did they think were absolutely necessary, which were nice-to-haves, and which were unnecessary?</p>

<p>When giving a startup a go, you certainly have to have that optimistic dedication and drive to succeed as Kevin Costner demonstrated in <em>Field of Dreams</em>.
But rather than going whole-hog right out of the gate, leveling his entire farm, and hoping for the best, Mr. Costner likely should have only hashed out a pitchers mound, picked up a few bats, and laid down some old shirts as bases.
Then he could see if a any corn stalks began to rustle at night, or if that voice in his head starts to whisper further instructions, like <em>&#8220;now add bench seating, we want bench seating&#8221;</em> or <em>&#8220;no, I meant build a basketball court, dummy!&#8221;</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Austin by Apple]]></title>
    <link href="http://iacono.heroku.com/writings/2009/07/28/austin/"/>
    <updated>2009-07-28T15:57:00-05:00</updated>
    <id>http://iacono.heroku.com/writings/2009/07/28/austin</id>
    <content type="html"><![CDATA[<p>I just visited Austin, Texas.
Before making the trip, I had been told that Austin was &#8220;amazing&#8221;, &#8220;the coolest place ever&#8221;, &#8220;better than chocolate ice cream rainbows&#8221; (I have strange, overly descriptive friends).</p>

<p>Well, you know what? Austin <em>is</em> better than chocolate ice cream rainbows &#8230; that can breath fire &#8230; and can fly &#8230; and beat Chuck Norris in a fight.</p>

<p>First off, Austin looks like it was designed by Apple.</p>

<p><img src="https://lh5.googleusercontent.com/-ZMdl1fAZHuk/TsGgLcbejSI/AAAAAAAAAb8/sQGUgQAIpu0/s371/austin-apple.PNG" alt="Austin Apple" /></p>

<p>Every <a href="http://farm4.static.flickr.com/3424/3768305272_cb8a45b81f.jpg">restaurant is cool as all hell</a>, as are <a href="http://farm3.static.flickr.com/2534/3767504859_322fb62eda.jpg">the cafes</a>, the book stores, and the grocery stores.
Every building has something unique, beautiful, and funky about it.
Even <a href="http://farm3.static.flickr.com/2539/3767504623_e2b9075cdb.jpg">the electric power plant</a> is sweet.
When a town makes its public utilities buildings gorgeous, you know you are dealing with some sort of unstoppable design force.</p>

<p>Not to be out done by their day-time counter parts, each Austin bar promises an interesting and exciting experience.
There is everything from ol&#8217; Southern Saloons, Irish Pubs / Boston-ish Sports Bars (pronounced Bahs), <a href="http://farm4.static.flickr.com/3524/3767504891_90a118f4cf.jpg">New York City-ish lounges</a>, and good old live-music venues.
You can <a href="http://farm4.static.flickr.com/3496/3767505169_285858580e.jpg">dance on roofs</a> to DJs, you can hippie-groove to local vocalists, you can play pool and mini-shuffle board, square dance, or <a href="http://farm4.static.flickr.com/3539/3768394918_e06c017e64.jpg">frat it up</a> if all else fails.
The extreme attention to detail and &#8220;weirdness&#8221; that you find in every single establishment is unparalleled.</p>

<p>The lucky inhabitants of Austin are really what makes the city what it is.
All are friendly and a bit &#8220;weird&#8221; themselves, in a very, very good way.
The uniqueness of each individual is projected into all the brick, mortar, cardboard, and clay that make up the infrastructure of Austin.
No wall goes <a href="http://farm4.static.flickr.com/3496/3767603291_82b387515b.jpg">unpainted</a>, no blank space goes without <a href="http://farm4.static.flickr.com/3592/3768401502_e4fe2d86fd.jpg">a sculpture</a>.</p>

<p>The city also seems to be fueled by no more than sun, music, and bikes &#8230; and possibly bats.
It&#8217;s Texas, so it&#8217;s dry, hot, and sunny.
Austin is known as the music capital of the United States and the sheer quantity of music present in Austin is awe-inspiring.
There is always some sort of festival or concert taking place.
Everyone you come across seems capable, upon request, of banging out a drum beat, belting out a few home made lyrics, or producing a concealed guitar that can be dangerously rocked out on.</p>

<p>And the bikes.
Everyone loves their bikes, and for good reason!
They are good for the environment, get you from point A to point B, plus provide a workout in the process.
And when you have no reason to ever leave the Austin City limits, who cares about the restricted travel radius!</p>

<p>Austin is truly a unique place.
The city has gone local and emphasized culture, music, art, and eco-friendliness, yielding a marvelous gem.
I will be visiting again soon, and I urge you to as well, especially if you never gotten weird in Austin before!</p>
]]></content>
  </entry>
  
</feed>
