<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: testing | Iacono Central]]></title>
  <link href="http://iacono.heroku.com/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://iacono.heroku.com/"/>
  <updated>2011-11-14T15:41:33-06:00</updated>
  <id>http://iacono.heroku.com/</id>
  <author>
    <name><![CDATA[Jeff Iacono]]></name>
    <email><![CDATA[jeff.iacono@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DRYing up those controller specs]]></title>
    <link href="http://iacono.heroku.com/writings/2011/04/09/drying-up-those-controller-specs/"/>
    <updated>2011-04-09T13:39:00-05:00</updated>
    <id>http://iacono.heroku.com/writings/2011/04/09/drying-up-those-controller-specs</id>
    <content type="html"><![CDATA[<p>I recently had a bunch of duplicate code in my controller specs and wanted to share a solution I arrived at that DRYed things up significantly.
Feel free to use it and abuse it and if you have recommendations on how to improve it, let me know.</p>

<p>First, the quick requirements and background: <em>all</em> controller methods must explicitly demonstrate that guests do not have access to certain resources and are told, upon any attempt to access them, that they must login in order gain access.</p>

<p>The first pass was to write the tests, get all to pass, then look to consolidate and improve the suites.
Here's the first pass:</p>

<p><div><script src='https://gist.github.com/1134284.js?file='></script>
<noscript><pre><code># Client required that *all* routes for controllers are covered and 
# do not allow guest access.
#
# There are several other controllers that, for guest test coverage,
# are identical to the Items Controller spec below
# Note: there are several non-CRUD methods; destroy makes a record
#       inactive; there is no record removal revealed via the API (client's request)

# spec/controllers/items_controller_spec.rb
require 'spec_helper'

describe ItemsController do
  context 'guest' do
    describe 'GET to index' do
      before  { get :index }
      specify { response.should redirect_to(login_path) }
      specify { flash.alert.should =~ /You must be logged in to access this page/ }
    end

    describe 'GET to show' do
      before  { get :show, :id =&gt; 1 }
      specify { response.should redirect_to(login_path) }
      specify { flash.alert.should =~ /You must be logged in to access this page/ }
    end

    describe 'GET to export' do
      before  { get :export }
      specify { response.should redirect_to(login_path) }
      specify { flash.alert.should =~ /You must be logged in to access this page/ }
    end

    describe 'GET to new' do
      before  { get :new }
      specify { response.should redirect_to(login_path) }
      specify { flash.alert.should =~ /You must be logged in to access this page/ }
    end

    describe 'POST to create' do
      before  { post :create }
      specify { response.should redirect_to(login_path) }
      specify { flash.alert.should =~ /You must be logged in to access this page/ }
    end

    describe 'GET to edit' do
      before  { get :edit, :id =&gt; 1 }
      specify { response.should redirect_to(login_path) }
      specify { flash.alert.should =~ /You must be logged in to access this page/ }
    end

    describe 'PUT to update' do
      before  { put :update, :id =&gt; 1 }
      specify { response.should redirect_to(login_path) }
      specify { flash.alert.should =~ /You must be logged in to access this page/ }
    end

    describe 'DELETE to destroy' do
      before  { delete :destroy, :id =&gt; 1 }
      specify { response.should redirect_to(login_path) }
      specify { flash.alert.should =~ /You must be logged in to access this page/ }
    end

    describe 'PUT to activate' do
      before  { put :activate, :id =&gt; 1 }
      specify { response.should redirect_to(login_path) }
      specify { flash.alert.should =~ /You must be logged in to access this page/ }
    end
  end
end

# spec/controllers/widgets_controller_spec.rb
require 'spec_helper'

describe WidgetsController do
  context 'guest' do
    # same code as ItemsControllerSpec above
  end
end

# spec/controllers/gears_controller_spec.rb
require 'spec_helper'

describe GearsController do
  context 'guest' do
    # same code as ItemsControllerSpec above
  end
end

# etc.</code></pre></noscript></div>
</p>

<p>These specs duplicate an awfully large amount of code.
This is an issue because more lines of code translate into more maintenance, more potential areas to make mistakes, and more places that need to be updated when things change.
(For example, what if we want to flash an alert of <em>"OH NOZ, SIGN IN FIRST PLZ"</em>?
I could find and replace, but that should be handled in one place.)</p>

<p>In order to remedy these issues, I added a controller macro that includes <em>#it_should_block_access_to(action, options = {})</em>, which is passed an action (:index, :create, :update), maps each to a default method (:get, :post, :put) if none is specified, and generates the appropriate routing (member vs collections).
It also handles format specification, such as :json, or setting any other arbitrary params via the options hash.</p>

<p>Here's the refactored code:</p>

<p><div><script src='https://gist.github.com/1134094.js?file='></script>
<noscript><pre><code># Client required that *all* methods for controllers are covered and 
# do not allow guest access.
#
# To remove code duplication, add controller macro, update test suite.
# Macro defaults to :html formatted requests and handles member vs collection (assumes :id)
# Note that we can specify methods, formats, params, etc. along the lines of:
#   it_should_block_access_to :index, :format =&gt; :json
#   it_should_block_access_to :something, :method =&gt; :post
#   it_should_block_access_to :index, :foo =&gt; :bar

# spec/support/controller_macros.rb
module ControllerMacros
  def self.included(base)
    base.extend(ClassMethods)
  end

  module ClassMethods
    def default_method_for(action)
      case action
      when :index, :show, :new, :edit, :export; return :get
      when :create;                             return :post
      when :update, :activate;                  return :put
      when :destroy;                            return :delete
      else raise &quot;no default method for #{action}&quot;
      end
    end

    def it_should_block_access_to(action, options = {})
      options[:format] ||= :html
      options[:id] = 1 if [:show, :edit, :destroy, :activate, :update].include?(action)

      method = options.delete(:method) || default_method_for(action)

      describe &quot;#{method.to_s.upcase} to #{action} via #{options[:format]}&quot; do
        before  { send(method, action, options) }
        specify { response.should redirect_to(login_path) }
        specify { flash.alert.should =~ /You must be logged in to access this page/ }
      end
    end
  end
end

RSpec.configuration.include ControllerMacros, :type =&gt; :controller


# spec/controllers/items_controller_spec.rb
require 'spec_helper'

describe ItemsController do
  context 'guest' do
    it_should_block_access_to :index
    it_should_block_access_to :show
    it_should_block_access_to :export
    it_should_block_access_to :new
    it_should_block_access_to :create
    it_should_block_access_to :edit
    it_should_block_access_to :update
    it_should_block_access_to :destroy
    it_should_block_access_to :activate    
  end
end

# spec/controllers/widgets_controller_spec.rb
require 'spec_helper'

describe WidgetsController do
  context 'guest' do
    it_should_block_access_to :index
    it_should_block_access_to :show
    it_should_block_access_to :export
    it_should_block_access_to :new
    it_should_block_access_to :create
    it_should_block_access_to :edit
    it_should_block_access_to :update
    it_should_block_access_to :destroy
    it_should_block_access_to :activate
  end
end

# spec/controllers/gears_controller_spec.rb
require 'spec_helper'

describe GearsController do
  context 'guest' do
    it_should_block_access_to :index
    it_should_block_access_to :show
    it_should_block_access_to :export
    it_should_block_access_to :new
    it_should_block_access_to :create
    it_should_block_access_to :edit
    it_should_block_access_to :update
    it_should_block_access_to :destroy
    it_should_block_access_to :activate
  end
end

# etc.</code></pre></noscript></div>
</p>

<p>The controller specs are cleaner, a big chunk of code duplication has been removed, and there is a main handler for these tests that does not (in my opinion) add too much complexity into the testing suite.</p>
]]></content>
  </entry>
  
</feed>
